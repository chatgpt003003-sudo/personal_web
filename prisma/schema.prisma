// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Change to "postgresql" for production
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  videoUrl    String?
  metadata    String?  // JSON string for flexible metadata
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  role     String @default("admin")
  
  // Relations
  blogPosts BlogPost[]
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   // Markdown content
  excerpt     String?  // Short description
  featuredImage String? // S3 URL
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  BlogPostCategory[]
  tags        BlogPostTag[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  posts       BlogPostCategory[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  posts       BlogPostTag[]
}

// Junction tables for many-to-many relationships
model BlogPostCategory {
  id         String   @id @default(cuid())
  blogPostId String
  categoryId String
  
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([blogPostId, categoryId])
}

model BlogPostTag {
  id         String   @id @default(cuid())
  blogPostId String
  tagId      String
  
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([blogPostId, tagId])
}

// Chat system models
model ChatConversation {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  userId      String?  // Optional user identification
  context     String?  // JSON context about user's page/behavior
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  messages    ChatMessage[]
}

model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // 'user' | 'assistant' | 'system'
  content        String
  messageType    String   @default("text") // 'text' | 'quick_reply' | 'decision_tree'
  metadata       String?  // JSON for additional data
  timestamp      DateTime @default(now())
  
  // Relations
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String
  source      String   // 'project' | 'blog' | 'manual'
  sourceId    String?  // Reference to original content
  embedding   String?  // JSON array of embedding vector
  metadata    String?  // JSON for additional context
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
